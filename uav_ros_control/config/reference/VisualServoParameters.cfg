#!/usr/bin/env python
PACKAGE = "uav_ros_control"

from dynamic_reconfigure.parameter_generator_catkin import *

gen = ParameterGenerator()

gen.add("k_p_x",    double_t,    0,   "Proportional gain for x axes", 0.5, 0, 1)
gen.add("k_i_x",    double_t,    0,   "Integrtor gain for x axes",    0.5, 0, 1)
gen.add("k_d_x",    double_t,    0,   "Derivative gain for x axes",   0, 0, 1)
gen.add("clamp_x",  double_t,    0,   "Integrator clamp for x axes",  0.5, 0, 1)
gen.add("offset_x_1", double_t,    0,   "Setpoint offset for x axes at one meter altitude",   0.5, 0, 1)
gen.add("offset_x_2", double_t,    0,   "Setpoint offset for x axes at two meters altitude",   0.5, 0, 1)
gen.add("deadzone_x", double_t,    0,   "Deadzone for x axes",  0.5, 0, 1)
gen.add("landing_range_x", double_t,    0,   "It's ok to land when abs(x_error) is smaller than this",  0.5, 0, 1)

gen.add("k_p_y",    double_t,    0,   "Proportional gain for y axes", 0.5, 0, 1)
gen.add("k_i_y",    double_t,    0,   "Integrtor gain for y axes",    0.5, 0, 1)
gen.add("k_d_y",    double_t,    0,   "Derivative gain for y axes",   0, 0, 1)
gen.add("clamp_y",  double_t,    0,   "Integrator clamp for y axes",  0.5, 0, 1)
gen.add("offset_y_1", double_t,    0,   "Setpoint offset for y axes at one meter altitude",   0.5, 0, 1)
gen.add("offset_y_2", double_t,    0,   "Setpoint offset for y axes at two meters altitude",   0.5, 0, 1)
gen.add("deadzone_y", double_t,    0,   "Deadzone for y axes",  0.5, 0, 1)
gen.add("landing_range_y", double_t,    0,   "It's ok to land when abs(y_error) is smaller than this",  0.5, 0, 1)

gen.add("k_p_z",    double_t,    0,   "Proportional gain for z axes", 0.5, 0, 1)
gen.add("k_i_z",    double_t,    0,   "Integrtor gain for z axes",    0.5, 0, 1)
gen.add("k_d_z",    double_t,    0,   "Derivative gain for z axes",   0, 0, 1)
gen.add("clamp_z",  double_t,    0,   "Integrator clamp for z axes",  0.5, 0, 1)
gen.add("offset_z_1", double_t,    0,   "Setpoint offset for z axes at one meter altitude",   0.5, 0, 1)
gen.add("offset_z_2", double_t,    0,   "Setpoint offset for z axes at two meters altitude",   0.5, 0, 1)
gen.add("deadzone_z", double_t,    0,   "Deadzone for z axes",  0.5, 0, 1)
gen.add("landing_range_z", double_t,    0,   "It's ok to land when abs(z_error) is smaller than this",  0.5, 0, 1)

gen.add("k_p_yaw",    double_t,    0,   "Proportional gain for yaw", 0.5, 0, 1)
gen.add("k_i_yaw",    double_t,    0,   "Integrtor gain for yaw",    0.5, 0, 1)
gen.add("k_d_yaw",    double_t,    0,   "Derivative gain for yaw",   0, 0, 1)
gen.add("clamp_yaw",  double_t,    0,   "Integrator clamp for yaw",  0.5, 0, 1)
gen.add("deadzone_yaw", double_t,    0,   "Deadzone for yaw",  0.5, 0, 1)
gen.add("landing_range_yaw", double_t,    0,   "It's ok to land when abs(yaw_error) is smaller than this",  0.5, 0, 1)

gen.add("k_p_dist",   double_t,    0,   "Proportional gain for distance", 0.5, 0, 1)
gen.add("k_i_dist",    double_t,    0,   "Integrtor gain for distance",    0.5, 0, 1)
gen.add("k_d_dist",    double_t,    0,   "Derivative gain for distance",   0, 0, 1)
gen.add("clamp_dist",  double_t,    0,   "Integrator clamp for distance",  0.5, 0, 1)
gen.add("deadzone_dist", double_t,    0,   "Deadzone for distance",  0.5, 0, 1)

gen.add("movement_saturation", double_t, 0, "Saruration for position difference along any axes", 0.5, 0, 1)
gen.add("yaw_difference", double_t,  0, "Yaw difference between the coordinate frames", 1.57, 0, 3.14)

gen.add("landing_speed", double_t,  0,  "The ammount by which the altitude setpoint is decreased during landing", 0.2, 0, 1)
gen.add("shutdown_height", double_t,0,  "The altitude below which the UAV should not descend.", 0.6, 0, 10);
gen.add("is_bricklaying", bool_t,     0,  "Are we in the bricklaying challenge?", True)

exit(gen.generate(PACKAGE, "visual_servo", "VisualServoParameters"))


