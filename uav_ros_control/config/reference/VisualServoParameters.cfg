#!/usr/bin/env python
PACKAGE = "uav_ros_control"

from dynamic_reconfigure.parameter_generator_catkin import *

gen = ParameterGenerator()
x_controller = gen.add_group("X axis")

x_controller.add("x_armed", bool_t, 0, "Use the controler", False)
x_controller.add("k_p_x",    double_t,    0,   "Proportional gain for x axes", 0.0, 0, 1)
x_controller.add("k_i_x",    double_t,    0,   "Integrtor gain for x axes",    0.0, 0, 1)
x_controller.add("k_d_x",    double_t,    0,   "Derivative gain for x axes",   0.0, 0, 1)
x_controller.add("offset_x_1", double_t,    0,   "Setpoint offset for x axes at one meter altitude",   0.0, -1, 1)
x_controller.add("offset_x_2", double_t,    0,   "Setpoint offset for x axes at two meters altitude",   0.0, -1, 1)
x_controller.add("deadzone_x", double_t,    0,   "Deadzone for x axes",  0.01, 0, 1)
x_controller.add("landing_range_x", double_t,    0,   "It's ok to land when abs(x_error) is smaller than this",  0.05, 0, 1)
x_controller.add("saturation_x", double_t, 0, "Saturation", 2.0, 0, 10)

y_controller = gen.add_group("Y axis")
y_controller.add("y_armed", bool_t, 0, "Use the controler", False)
y_controller.add("k_p_y",    double_t,    0,   "Proportional gain for y axes", 0.0, 0, 1)
y_controller.add("k_i_y",    double_t,    0,   "Integrtor gain for y axes",    0.0, 0, 1)
y_controller.add("k_d_y",    double_t,    0,   "Derivative gain for y axes",   0.0, 0, 1)
y_controller.add("offset_y_1", double_t,    0,   "Setpoint offset for y axes at one meter altitude",   -0.4, -1, 1)
y_controller.add("offset_y_2", double_t,    0,   "Setpoint offset for y axes at two meters altitude",   -0.25, -1, 1)
y_controller.add("deadzone_y", double_t,    0,   "Deadzone for y axes",  0.01, 0, 1)
y_controller.add("landing_range_y", double_t,    0,   "It's ok to land when abs(y_error) is smaller than this",  0.05, 0, 1)
y_controller.add("saturation_y", double_t, 0, "Saturation", 2.0, 0, 10)

z_controller = gen.add_group("Z axis")
z_controller.add("z_armed", bool_t, 0, "Use the controler", False)
z_controller.add("k_p_z",    double_t,    0,   "Proportional gain for z axes", 0.0, 0, 1)
z_controller.add("k_i_z",    double_t,    0,   "Integrtor gain for z axes",    0.0, 0, 1)
z_controller.add("k_d_z",    double_t,    0,   "Derivative gain for z axes",   0.0, 0, 1)
z_controller.add("deadzone_z", double_t,    0,   "Deadzone for z axes",  0.5, 0, 1)
z_controller.add("landing_range_z", double_t,    0,   "It's ok to land when abs(z_error) is smaller than this",  0.05, 0, 1)
z_controller.add("saturation_z", double_t, 0, "Saturation", 2.0, 0, 2)

yaw_controller = gen.add_group("Yaw control")
yaw_controller.add("yaw_armed", bool_t, 0, "Use the controler", False)
yaw_controller.add("k_p_yaw",    double_t,    0,   "Proportional gain for yaw", 0.0, 0, 1)
yaw_controller.add("k_i_yaw",    double_t,    0,   "Integrtor gain for yaw",    0.0, 0, 1)
yaw_controller.add("k_d_yaw",    double_t,    0,   "Derivative gain for yaw",   0.0, 0, 1)
yaw_controller.add("saturation_yaw", double_t, 0, "Saturation", 2.0, 0, 10)
yaw_controller.add("deadzone_yaw", double_t,    0,   "Deadzone for yaw",  0.02, 0, 1)
yaw_controller.add("landing_range_yaw", double_t,    0,   "It's ok to land when abs(yaw_error) is smaller than this",  0.05, 0, 1)

dist_controller = gen.add_group("Distance control")
dist_controller.add("dist_armed", bool_t, 0, "Use the controler", False)
dist_controller.add("k_p_dist",   double_t,    0,   "Proportional gain for distance", 0.0, 0, 1)
dist_controller.add("k_i_dist",    double_t,    0,   "Integrtor gain for distance",    0.0, 0, 1)
dist_controller.add("k_d_dist",    double_t,    0,   "Derivative gain for distance",   0.0, 0, 1)
dist_controller.add("deadzone_dist", double_t,    0,   "Deadzone for distance",  0.02, 0, 1)
dist_controller.add("saturation_dist", double_t, 0, "Saturation", 2.0, 0, 10)

general_params = gen.add_group("General parameters")
general_params.add("yaw_difference", double_t,  0, "Yaw difference between the coordinate frames", 0, -3.14, 3.14)
general_params.add("landing_speed", double_t,  0,  "The ammount by which the altitude setpoint is decreased during landing", 0.2, 0, 1)
general_params.add("shutdown_height", double_t,0,  "The altitude below which the UAV should not descend.", 0.6, 0, 10);
general_params.add("pose_snapshot_movement", double_t, 0, "How much is the snapshot allowed to move", 0.0005, 0, 0.1);
general_params.add("is_bricklaying", bool_t,   0,  "Are we in the bricklaying challenge?", True)
general_params.add("pickup_allowed", bool_t,   0,  "", False)
general_params.add("use_odometry", bool_t, 0, "Use odometry or take a screenshot of the position during startup.", True);
general_params.add("disable", bool_t, 0, "Temporarily turn off the node", True);

exit(gen.generate(PACKAGE, "visual_servo", "VisualServoParameters"))


